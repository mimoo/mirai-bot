name: MIRAI

# Why `on: repository_dispatch`?
#
# If we trigger this action on pull_request events,
# then it will run with the forked repo GITHUB_TOKEN
# this is a problem as it won't allow the action to write
# a comment on the PR in the last step.
#
# instead, we trigger this remotely via a bot we're running ourselves.
on:
  repository_dispatch:
    types: [new_PR]

jobs:
  install_and_run_MIRAI:
    runs-on: ubuntu-latest

    steps:
      - name: Who triggered this?
        env:
          PULL_ID: ${{ github.event.client_payload.pull_id }}
        run: |
          echo "action triggerd by https://github.com/libra/diem/pull/$PULL_ID"

      - name: Install Z3
        uses: pavpanchekha/setup-z3@v1.2

      - name: Checkout MIRAI
        uses: actions/checkout@v2
        with:
          repository: "facebookexperimental/MIRAI"
          path: "MIRAI"

      - name: Install MIRAI
        if: success()
        working-directory: ./MIRAI
        run: |
          set -x
          rustup component add rustc-dev
          rustup component add rustfmt
          rustup component add llvm-tools-preview
          RUSTFLAGS='-Clink-arg=-L./binaries -Clink-arg=-lstdc++' cargo install --path ./checker

      - name: Checkout libra
        if: success()
        uses: actions/checkout@v2
        with:
          path: "libra"
          fetch-depth: 50 # this is to make sure we obtain the target base commit
          repository: ${{ github.event.client_payload.owner }}/${{ github.event.client_payload.repo }} # repo of the forked libra/diem
          ref: ${{ github.event.client_payload.pull_ref }} # commit that triggered the PR

      - name: Build target base then checkout PR to only run MIRAI on the changes
        if: success()
        working-directory: ./libra
        env:
          BASE: ${{ github.event.client_payload.base_ref }}
        run: |
          set -x
          rustup override set `cat ../MIRAI/rust-toolchain`
          rustup component add rustc-dev
          rustup component add rustfmt
          git checkout $BASE
          # we should always be able to build $BASE
          RUSTFLAGS="-Z always_encode_mir" cargo build
          git checkout -

      - name: Run MIRAI on PR (this step can fail if cargo can't build the PR)
        if: success()
        working-directory: ./libra
        timeout-minutes: 60
        run: |
          set -o pipefail
          RUSTC_WRAPPER=mirai RUSTFLAGS="-Z always_encode_mir" cargo build --message-format=json -q | tee ../mirai_results

      - name: Only run this is build failed (to debug)
        if: failure()
        working-directory: ./libra
        run: |
          RUSTC_WRAPPER=mirai RUSTFLAGS="-Z always_encode_mir" cargo build --verbose

      - name: Get files that were changed
        if: success()
        working-directory: ./libra
        run: |
          git diff --name-only $BASE > ../files_changed

      - name: Write comment on PR with MIRAI warnings
        if: success()
        uses: actions/github-script@0.5.0
        env:
          PULL_ID: ${{ github.event.client_payload.pull_id }}
          OWNER: ${{ github.event.client_payload.owner }}
        with:
          github-token: ${{secrets.MIRAI_BOT}}
          script: |
            const fs = require('fs');
            const readline = require('readline');
            var path = require('path');

            function valid_warning(warning) {
              if (!warning.hasOwnProperty("target") || !warning.hasOwnProperty("message")) {
                return false;
              }
              if (!warning.target.hasOwnProperty("src_path")) {
                return false;
              }
              if (!warning.message.hasOwnProperty("rendered")) {
                return false;
              }
              return true;
            }

            async function main() {
              // get info on PR
              const pullrequest = await github.pulls.get({
                owner: "libra",
                repo: "libra",
                pull_number: process.env.PULL_ID
              });
              var pr_creator = pullrequest.data.user.login;

              // get all the files that have changed
              const files_changed_reader = readline.createInterface({
                input: fs.createReadStream('files_changed'),
                console: false
              });
              var files_changed = [];
              for await (const line of files_changed_reader) {
                files_changed.push(line);
              }
              console.log("files changed:", files_changed);

              // parse the MIRAI warnings
              valid_warnings = [];
              const mirai_output = readline.createInterface({
                input: fs.createReadStream('mirai_results'),
                console: false
              });
              for await (const line of mirai_output) {
                // get the relative filename of the warning
                var absolute_path = path.resolve(process.cwd(), "libra")
                var warning = JSON.parse(line);
                if(!valid_warning(warning)) {
                  continue;
                }

                // valid warning found
                console.log("warning found:", warning);

                // if the PR owner is whitelisted, all warnings are included
                if( ["mimoo", "phlip9", "huitseeker", "stonebuddha", "anomalroil"].includes(pr_creator) ) {
                  console.log("owner of PR is whitelisted, all warnings are included");
                  valid_warnings.push(warning);
                  continue;
                }

                // see if it matched one of the files changed
                var touched_absolute = warning.target.src_path;
                var touched = path.relative(absolute_path, touched_absolute);

                if (files_changed.includes(touched)) {
                  console.log(":) warning related to files changed!");
                  valid_warnings.push(warning);
                } else {
                  console.log(":( warning not related to files changed");
                }
              }

              // no warnings
              if (valid_warnings.length == 0) {
                console.log("no valid warnings detected");
                return;
              }

              // create the message
              var message = "";
              for (warning of valid_warnings) {
                message += warning.message.rendered;
              }
              var message = `Hello you!

            It looks like #mirai found some warnings:

            <details><summary>click here to reveal them</summary>
            <pre><code>${message}</code></pre>
            </details>

            `;

              // delete previous comments
              const comments = await github.issues.listComments({
                owner: "libra",
                repo: "libra",
                issue_number: process.env.PULL_ID
              });
              for (let comment of comments.data) {
                if (comment.user.login === "MIRAI-bot" && && comment.body.includes("#mirai")) {
                  await github.issues.deleteComment({
                    owner: "libra",
                    repo: "libra",
                    comment_id: comment.id
                  });
                }
              }

              // comment
              await github.issues.createComment({
                owner: "libra",
                repo: "libra",
                issue_number: process.env.PULL_ID,
                body: message
              });
              console.log(message);

              // warn devs
              console.log("MIRAI found warnings on https://github.com/libra/diem/pull/" + process.env.PULL_ID);
              throw "MIRAI warnings were found";
            }

            main();
