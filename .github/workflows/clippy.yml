name: clippy

# Why `on: repository_dispatch`?
#
# If we trigger this action on pull_request events,
# then it will run with the forked repo GITHUB_TOKEN
# this is a problem as it won't allow the action to write
# a comment on the PR in the last step.
#
# instead, we trigger this remotely via a bot we're running ourselves.
on:
  repository_dispatch:
    types: [new_PR]

jobs:
  run_clippy:
    runs-on: ubuntu-latest

    steps:
      - name: Who triggered this?
        env:
          PULL_ID: ${{ github.event.client_payload.pull_id }}
        run: |
          echo "action triggerd by https://github.com/libra/libra/pull/$PULL_ID"

      - name: Whitelist of users
        uses: actions/github-script@0.5.0
        env:
          PULL_ID: ${{ github.event.client_payload.pull_id }}
        with:
          github-token: ${{secrets.MIRAI_BOT}}
          script: |
            const fs = require('fs');
            var path = require('path');

            async function main() {
              // get info on PR
              const pullrequest = await github.pulls.get({
                owner: "libra",
                repo: "libra",
                pull_number: process.env.PULL_ID
              });

              // allowlist
              /*
              var allowlist = ["mimoo"];
              if (!allowlist.includes(pullrequest.data.user.login)) {
                console.log(pullrequest.data.user.login + " is not in the allowlist of this github action");
                throw "user not in whitelist!";
              }
              */
            }

            main();

      - name: Checkout the PR
        if: success()
        uses: actions/checkout@v2
        with:
          path: "libra"
          fetch-depth: 50 # this is to make sure we obtain the target base commit
          repository: ${{ github.event.client_payload.owner }}/${{ github.event.client_payload.repo }} # repo of the forked libra/libra
          ref: ${{ github.event.client_payload.pull_ref }} # commit that triggered the PR

      - name: Get files that were changed
        if: success()
        working-directory: ./libra
        env:
          BASE: ${{ github.event.client_payload.base_ref }}
        run: |
          git diff -U0 $BASE | tee ../files_changed

      - name: run Clippy
        if: success()
        working-directory: ./libra
        timeout-minutes: 60
        run: |
          set -x

          # update rust and get clippy
          rustup install nightly
          rustup update
          rustup component add clippy --toolchain nightly

          # run clippy
          cargo +nightly clippy --quiet --message-format=json --workspace -- \
            -A clippy::all \
            \
            -W clippy::as_conversions \
            -W clippy::await_holding_lock \
            -A clippy::cargo_common_metadata \
            -W clippy::cast_lossless \
            -W clippy::cast_possible_truncation \
            -W clippy::cast_possible_wrap \
            -W clippy::cast_precision_loss \
            -W clippy::cast_ptr_alignment \
            -W clippy::cast_sign_loss \
            -W clippy::checked_conversions \
            -W clippy::clone_on_ref_ptr \
            -W clippy::cognitive_complexity \
            -W clippy::copy_iterator \
            -W clippy::create_dir \
            -W clippy::dbg_macro \
            -W clippy::debug_assert_with_mut_call \
            -W clippy::decimal_literal_representation \
            -W clippy::default_trait_access \
            -W clippy::disallowed_method \
            -W clippy::doc_markdown \
            -W clippy::else_if_without_else \
            -W clippy::empty_enum \
            -W clippy::empty_line_after_outer_attr \
            -W clippy::enum_glob_use \
            -W clippy::exit \
            -W clippy::expect_used \
            -W clippy::expl_impl_clone_on_copy \
            -W clippy::explicit_deref_methods \
            -W clippy::explicit_into_iter_loop \
            -W clippy::explicit_iter_loop \
            -W clippy::fallible_impl_from \
            -W clippy::filetype_is_file \
            -W clippy::filter_map \
            -W clippy::filter_map_next \
            -W clippy::find_map \
            -W clippy::float_arithmetic \
            -W clippy::float_cmp_const \
            -W clippy::fn_params_excessive_bools \
            -W clippy::future_not_send \
            -W clippy::get_unwrap \
            -W clippy::if_not_else \
            -W clippy::implicit_hasher \
            -A clippy::implicit_return \
            -W clippy::implicit_saturating_sub \
            -W clippy::imprecise_flops \
            -W clippy::indexing_slicing \
            -W clippy::inefficient_to_string \
            -W clippy::inline_always \
            -A clippy::inline_asm_x86_att_syntax \ 
            -A clippy::inline_asm_x86_intel_syntax \
            -A clippy::integer_arithmetic \
            -W clippy::integer_division \
            -W clippy::invalid_upcast_comparisons \
            -W clippy::items_after_statements \
            -W clippy::large_digit_groups \
            -W clippy::large_stack_arrays \
            -W clippy::let_underscore_must_use \
            -W clippy::let_unit_value \
            -W clippy::linkedlist \
            -W clippy::lossy_float_literal \
            -W clippy::macro_use_imports \
            -W clippy::map_flatten \
            -W clippy::map_unwrap_or \
            -W clippy::match_bool \
            -W clippy::match_on_vec_items \
            -W clippy::match_same_arms \
            -W clippy::match_wild_err_arm \
            -W clippy::match_wildcard_for_single_variants \
            -W clippy::maybe_infinite_iter \
            -W clippy::mem_forget \
            -W clippy::missing_const_for_fn \
            -W clippy::missing_docs_in_private_items \
            -W clippy::missing_errors_doc \
            -A clippy::missing_inline_in_public_items \
            -W clippy::module_name_repetitions \
            -W clippy::modulo_arithmetic \
            -W clippy::multiple_crate_versions \
            -W clippy::multiple_inherent_impl \
            -W clippy::must_use_candidate \
            -W clippy::mut_mut \
            -W clippy::mutex_integer \
            -W clippy::needless_borrow \
            -W clippy::needless_continue \
            -W clippy::needless_pass_by_value \
            -W clippy::non_ascii_literal \
            -W clippy::option_if_let_else \
            -W clippy::option_option \
            -W clippy::panic \
            -W clippy::panic_in_result_fn \
            -W clippy::path_buf_push_overwrite \
            -W clippy::pattern_type_mismatch \
            -W clippy::print_stdout \
            -W clippy::pub_enum_variant_names \
            -W clippy::range_minus_one \
            -W clippy::range_plus_one \
            -W clippy::rc_buffer \
            -W clippy::redundant_closure_for_method_calls \
            -W clippy::redundant_pub_crate \
            -W clippy::rest_pat_in_fully_bound_structs \
            -W clippy::same_functions_in_if_condition \
            -W clippy::shadow_reuse \
            -W clippy::shadow_same \
            -W clippy::shadow_unrelated \
            -W clippy::similar_names \
            -W clippy::single_match_else \
            -W clippy::string_add \
            -W clippy::string_add_assign \
            -W clippy::struct_excessive_bools \
            -W clippy::suboptimal_flops \
            -W clippy::todo \
            -W clippy::too_many_lines \
            -W clippy::trait_duplication_in_bounds \
            -W clippy::trivially_copy_pass_by_ref \
            -W clippy::type_repetition_in_bounds \
            -W clippy::unicode_not_nfc \
            -W clippy::unimplemented \
            -W clippy::unneeded_field_pattern \
            -W clippy::unnested_or_patterns \
            -W clippy::unreachable \
            -W clippy::unreadable_literal \
            -W clippy::unsafe_derive_deserialize \
            -W clippy::unseparated_literal_suffix \
            -W clippy::unused_self \
            -W clippy::unwrap_in_result \
            -W clippy::unwrap_used \
            -W clippy::use_debug \
            -W clippy::use_self \
            -W clippy::used_underscore_binding \
            -W clippy::useless_let_if_seq \
            -W clippy::useless_transmute \
            -W clippy::verbose_bit_mask \
            -W clippy::verbose_file_reads \
            -W clippy::wildcard_dependencies \
            -W clippy::wildcard_enum_match_arm \
            -W clippy::wildcard_imports \
            -W clippy::wrong_pub_self_convention \
            | tee ../clippy_result

      - name: Get lints only for the relevant files
        if: success()
        run: |
          python << END

          #
          # Create list of files + line numbers
          #
          import re
          relevant_files = open("files_changed", "r") # git diff -U0 output
          file_names = []

          for line in relevant_files.readlines():
            line = line.strip()

            # get file name
            if line.startswith("diff --git a/"):
              file_name = re.search('a/(.*) b/', line).group(1)
              file_names.append({"name": file_name.strip(), "lines": []})

            # get new code's lines number
            if line.startswith("@@"):
              search = re.search('\+(\d*)(\,\d*)?', line)
              line_start = int(search.group(1))
              line_end = search.group(2)
              if line_end == None:
                line_end = line_start
              else:
                line_end = line_start + int(line_end[1:])
              # add these lines to last file_name added
              file_names[-1]["lines"].append([line_start, line_end])

          print(file_names)
          #
          # Find relevant clippy results
          #
          import json
          clippy_output = open("clippy_result", 'r')

          # lint hit a file that was changed
          lint_found = open("lint_found", "w")
          # lint hit a file and a line number that was added
          lint_lines_found = open("lint_lines_found", "w")

          for file_name in file_names:
            # find that file in cargo clippy output
            for line in clippy_output.readlines():
              try:
                obj = json.loads(line.strip())
                if "message" in obj:
                  for span in obj["message"]["spans"]:
                    # we found a file that was modified
                    if span["file_name"] == file_name["name"]:
                      message = obj["message"]["rendered"]
                      lint_found.write(message)

                      print("trying to find a line hit for ", span["file_name"], span["line_start"], span["line_end"])
                      for lines in file_name["lines"]:
                        print("checking", lines)
                        # we found a line that was modified
                        if span["line_start"] >= lines[0] and span["line_end"] <= lines[1]:
                          print("lines hit for", span["file_name"])
                          lint_lines_found.write(message)
                          break
              except:
                pass

            # reset clippy output for next pass
            clippy_output.seek(0)
          END

      - name: Display lint for file
        if: success()
        run: |
          cat lint_found

      - name: Display lint for file + lines
        if: success()
        run: |
          cat lint_lines_found

      - name: Write comment on PR if lints are found
        if: success()
        uses: actions/github-script@0.5.0
        env:
          PULL_ID: ${{ github.event.client_payload.pull_id }}
          OWNER: ${{ github.event.client_payload.owner }}
        with:
          github-token: ${{secrets.MIRAI_BOT}}
          script: |
            const fs = require('fs');
            var path = require('path');

            async function main() {
              // get lints 
              const lint_found = fs.readFileSync('lint_found');
              const lint_lines_found = fs.readFileSync('lint_lines_found');

              // don't post anything if relevant files are not hit
              if (lint_lines_found.length < 5) { // empty hack
                return;
              }

              // create the message
              var message = `Hello you!

            It looks like #clippy found some allowed lints that might be useful to you:

            <details><summary>click here to reveal them</summary>
            <pre><code>${lint_lines_found}</code></pre>
            </details>
            `;

              // delete previous comments from MIRAI-BOT that includes the tag "#clippy"
              const comments = await github.issues.listComments({
                owner: "libra",
                repo: "libra",
                issue_number: process.env.PULL_ID
              });
              console.log("comments", comments);
              for (let comment of comments.data) {
                console.log("comment", comment);
                console.log("comment.user.login", comment.user.login);
                console.log(comment.user.login === "MIRAI-bot");
                console.log("comment.body", comment.body);
                console.log(comment.body.includes("#clippy"));
                if (comment.user.login === "MIRAI-bot" && comment.body.includes("#clippy")) {
                  await github.issues.deleteComment({
                    owner: "libra",
                    repo: "libra",
                    comment_id: comment.id
                  });
                }
              }

              // comment
              await github.issues.createComment({
                owner: "libra",
                repo: "libra",
                issue_number: process.env.PULL_ID,
                body: message
              });
              console.log(message);

              // warn devs
              console.log("Clippy found warnings on https://github.com/libra/libra/pull/" + process.env.PULL_ID);
              throw "Clippy warnings were found!";
            }

            main();
